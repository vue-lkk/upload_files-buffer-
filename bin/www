#!/usr/bin/env node

/**
 * Module dependencies.【模块依赖关系。】
 */
const db = require('../db/db')

// 连接数据库成功后，在开启服务器
db.then(() => {
  var app = require('../app');
  var debug = require('debug')('generator:server');
  var http = require('http');
  // 《1》引入https
  // const https = require('https')

  /**
   * Get port from environment and store in Express.【从环境中获取端口并在Express中存储。】
   */

  var port = normalizePort(process.env.PORT || '3000');
  // 《2》修改端口 443
  // var port = normalizePort(process.env.PORT || '443');

  app.set('port', port);

  /**
   * Create HTTP server.【创建HTTP服务器。】
   */

  var server = http.createServer(app);

  // 《3》配置证书
  // var server = https.createServer({
  //   key: fs.readFileSync('C:\\certbot\\live\\www.sggnb.cn\\privkey.pem'),
  //   cert: fs.readFileSync('C:\\certbot\\live\\www.sggnb.cn\\cert.pem'),
  //   ca: fs.readFileSync('C:\\certbot\\live\\www.sggnb.cn\\chain.pem'), 
  // },app);

  /**
   * Listen on provided port, on all network interfaces.【在所有网络接口上监听所提供的端口。】
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.【将端口规范化为数字、字符串或false。】
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.【HTTP服务器“错误”事件的事件监听器。】
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages【用友好的消息处理特定的监听错误】
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.【HTTP服务器“监听”事件的事件监听器。】
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

})

